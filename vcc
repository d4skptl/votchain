#!/usr/bin/env python3

import random, hashlib
import sys, os, time, argparse, json
from votchain import VotchainCli

DEFAULT_FEE = 0.00000001

def parse_args():
    parser = argparse.ArgumentParser(description='VotChain Miner')
    parser.add_argument(
            '-n',
            dest='name',
            type=str,
            default=None,
            help='Name for the voting chain')
    parser.add_argument(
            '-i',
            dest='keysfile',
            type=str,
            default=None,
            help='File containing keys to be used')
    parser.add_argument(
            '-b',
            dest='balance',
            action="store_true",
            help='Show current tokens balance')
    parser.add_argument(
            '-w',
            dest='walletinfo',
            action="store_true",
            help='Show wallet info (address and public key)')
    parser.add_argument(
            '-tt',
            dest='sendto',
            type=str,
            default=None,
            help='Send tokens from T to T address. Syntax <addr>:<amount>')
    parser.add_argument(
            '-tz',
            dest='tz_sendto',
            type=str,
            default=None,
            help='Send tokens from T address to Z. Syntax <addr>:<amount>')
    parser.add_argument(
            '-zz',
            dest='zz_sendto',
            type=str,
            default=None,
            help='Send tokens from Z address to T or Z. Syntax <addr>:<amount>')
    parser.add_argument(
            '--shield',
            dest='zshield',
            action="store_true",
            help='Shield coinbase tokens to an own Z address')
    parser.add_argument(
            '--showzops',
            dest='show_z_ops',
            action="store_true",
            help='Show Z operations status')
    parser.add_argument(
            '--fee',
            dest='set_fee',
            type=float,
            default=DEFAULT_FEE,
            help='Set fee for tx operation (float)')
    parser.add_argument(
            '-c',
            dest='rawcall',
            type=str,
            default=None,
            help='Make raw RPC calls to daemon like: -c "getblock 1"')
    return parser.parse_args()

def jprint(text):
    print(json.dumps(text, indent=2, sort_keys=True, ensure_ascii=False))

def get_ports(name):
    m = hashlib.md5()
    m.update(name.encode('utf-8'))
    base_port = int('0x'+m.hexdigest(),16)%10000
    return base_port+20000, base_port+30000


args = parse_args()
pubkey = None
privkey = None
address = None

if not args.name:
    print("Please, specify a name for the chain")
    sys.exit(1)

if args.keysfile:
    with open(args.keysfile, 'r') as kf:
        raw_keys = kf.read()
    keys = eval(raw_keys)
    privkey = keys['private_key']
    pubkey = keys['public_key']
    address = keys['address']

port,rpc_port = get_ports(args.name)

cli = VotchainCli(rpc_port)
cli.set_fee(DEFAULT_FEE)

if not cli.is_ready():
    print("Cannot connect to RPC. Either name is wrong or miner is not running, please start it before using this tool")
    sys.exit(1)

if privkey: cli.import_key(privkey)

if args.balance:
    print(cli.get_balance())

if args.set_fee:
    cli.set_fee(args.set_fee)

if args.walletinfo:
    for a in cli.get_t_addresses_balance():
        print("Address:%s Balance:%.8f" %(a['address'], a['amount']))
    for a in cli.get_z_addresses_balance():
        print("Address:%s Balance:%.8f" %(a['address'], a['amount']))

if args.rawcall:
    out = cli.call(*args.rawcall.split())
    if type(out) == list:
        for l in out: jprint(l)
    else: print(out)

if args.sendto:
    dst_amt = args.sendto.split(':')
    if len(dst_amt) < 2:
        print("Wrong address/amount format. Please use <addr>:<amount>")
    else:
        print(cli.send(dst_amt[0], dst_amt[1]))

if args.tz_sendto:
    dst_amt = args.tz_sendto.split(':')
    if len(dst_amt) < 2:
        print("Wrong address/amount format. Please use <addr>:<amount>")
    else:
        print(cli.tz_send(dst_amt[0], float(dst_amt[1])))

if args.zz_sendto:
    dst_amt = args.zz_sendto.split(':')
    if len(dst_amt) < 2:
        print("Wrong address/amount format. Please use <addr>:<amount>")
    else:
        print(cli.zz_send(dst_amt[0], dst_amt[1]))

if args.zshield:
    print(cli.zshield())

if args.show_z_ops:
    jprint(cli.call('z_getoperationstatus'))
